"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var base_1 = require("./base");
var counts_1 = require("./counts");
var info_1 = require("./info");
var queryArticles_1 = require("./queryArticles");
var returnInfo_1 = require("./returnInfo");
/**
 * @class GetTopCorrelations
 * Provides classes needed to identify concepts or categories
 * that trend the most with a concept, category or a custom time series
 */
var GetTopCorrelations = /** @class */ (function (_super) {
    __extends(GetTopCorrelations, _super);
    function GetTopCorrelations(er) {
        var _this = _super.call(this) || this;
        _this.er = er;
        _this.setVal("action", "findTopCorrelations");
        return _this;
    }
    Object.defineProperty(GetTopCorrelations.prototype, "path", {
        get: function () {
            return "/json/correlate";
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Specify the user defined array of input data
     * @param inputDataArr: array of tuples (date, val) where date is a date object or string in YYYY-MM-DD format and val is the value/counts for that date
     */
    GetTopCorrelations.prototype.setCustomInputData = function (inputDataArr) {
        var e_1, _a;
        this.clearVal("testData");
        try {
            for (var inputDataArr_1 = __values(inputDataArr), inputDataArr_1_1 = inputDataArr_1.next(); !inputDataArr_1_1.done; inputDataArr_1_1 = inputDataArr_1.next()) {
                var _b = inputDataArr_1_1.value, date = _b.date, val = _b.val;
                if (!_.isNumber(val)) {
                    throw new Error("Value is expected to be a number");
                }
                this.addArrayVal("testData", { date: base_1.QueryParamsBase.encodeDateTime(date), count: val });
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (inputDataArr_1_1 && !inputDataArr_1_1.done && (_a = inputDataArr_1.return)) _a.call(inputDataArr_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * Use the queryArticles to find articles that match the criteria. For the articles that match
     * criteria in queryArticles compute the time-series (number of resulting articles for each date)
     * an use the time series as the input data.
     * @param queryArticles An instance of QueryArticles class, containing the conditions that are use to find the matching time-series. You don't need to specify any requested result.
     */
    GetTopCorrelations.prototype.loadInputDataWithQuery = function (queryArticles) {
        return __awaiter(this, void 0, void 0, function () {
            var e_2, _a, requestArticlesTimeAggr, response, _b, _c, object;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        this.clearVal("testData");
                        if (!(queryArticles instanceof queryArticles_1.QueryArticles)) {
                            throw new Error("'queryArticles' expected to be an instance of QueryArticles");
                        }
                        requestArticlesTimeAggr = new queryArticles_1.RequestArticlesTimeAggr();
                        queryArticles.setRequestedResult(requestArticlesTimeAggr);
                        return [4 /*yield*/, this.er.execQuery(queryArticles)];
                    case 1:
                        response = _d.sent();
                        if (_.has(response, "timeAggr")) {
                            try {
                                // Potential issue if response["timeAggr"] is an object
                                for (_b = __values(response["timeAggr"]), _c = _b.next(); !_c.done; _c = _b.next()) {
                                    object = _c.value;
                                    this.addArrayVal("testData", JSON.stringify(object));
                                }
                            }
                            catch (e_2_1) { e_2 = { error: e_2_1 }; }
                            finally {
                                try {
                                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                                }
                                finally { if (e_2) throw e_2.error; }
                            }
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Use GetCounts class to obtain daily counts information for concept/category of interest.
     * @param getCounts An instance of GetCounts class.
     */
    GetTopCorrelations.prototype.loadInputDataWithCounts = function (getCounts) {
        return __awaiter(this, void 0, void 0, function () {
            var e_3, _a, response, key, _b, _c, object;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        this.clearVal("testData");
                        if (!(getCounts instanceof counts_1.GetCounts)) {
                            throw new Error("'getCounts' is expected to be an instance of GetCounts");
                        }
                        return [4 /*yield*/, this.er.execQuery(getCounts)];
                    case 1:
                        response = _d.sent();
                        if (_.size(response) > 1) {
                            throw new Error("The returned object had multiple keys. When creating the GetCounts instance use only one uri.");
                        }
                        if (_.isEmpty(response)) {
                            throw new Error("Obtained an empty object");
                        }
                        if (_.has(response, "error")) {
                            throw new Error(_.get(response, "error"));
                        }
                        key = _.first(_.keys(response));
                        if (!_.isArray(response[key])) {
                            throw new Error("Expected an array");
                        }
                        try {
                            for (_b = __values(response[key]), _c = _b.next(); !_c.done; _c = _b.next()) {
                                object = _c.value;
                                this.addArrayVal("testData", JSON.stringify(object));
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Do we have valid input data (needed before we can compute correlations)
     */
    GetTopCorrelations.prototype.hasValidInputData = function () {
        return this.hasVal("testData");
    };
    /**
     * Compute concepts that correlate the most with the input data. If candidateConceptsQuery is provided we first identify the
     * concepts that are potentially returned as top correlations. Candidates are obtained by making the query and analyzing the
     * concepts that appear in the resulting articles. The top concepts are used as candidates among which we return the top correlations.
     * If conceptType is provided then only concepts of the specified type can be provided as the result.
     *
     * @param args Object which contains a host of optional parameters
     */
    GetTopCorrelations.prototype.getTopConceptCorrelations = function (args) {
        if (args === void 0) { args = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var e_4, _a, _b, candidateConceptsQuery, _c, candidatesPerType, _d, conceptType, _e, exactCount, _f, approxCount, _g, returnInfo, getTopCorrelations, response, res, corrs, conceptIds, conceptInfos_1, _h, _j, i, ids, q, info, e_4_1;
            return __generator(this, function (_k) {
                switch (_k.label) {
                    case 0:
                        _b = args.candidateConceptsQuery, candidateConceptsQuery = _b === void 0 ? undefined : _b, _c = args.candidatesPerType, candidatesPerType = _c === void 0 ? 1000 : _c, _d = args.conceptType, conceptType = _d === void 0 ? undefined : _d, _e = args.exactCount, exactCount = _e === void 0 ? 10 : _e, _f = args.approxCount, approxCount = _f === void 0 ? 0 : _f, _g = args.returnInfo, returnInfo = _g === void 0 ? new returnInfo_1.ReturnInfo() : _g;
                        this.clearVal("contextConceptIds");
                        getTopCorrelations = _.cloneDeep(this);
                        if (!!_.isUndefined(candidateConceptsQuery)) return [3 /*break*/, 2];
                        if (!(candidateConceptsQuery instanceof (queryArticles_1.QueryArticles))) {
                            throw new Error("'candidateConceptsQuery' is expected to be of type QueryArticles");
                        }
                        candidateConceptsQuery.setRequestedResult(new queryArticles_1.RequestArticlesConceptAggr());
                        candidateConceptsQuery.setVal("conceptAggrConceptCountPerType", candidatesPerType);
                        candidateConceptsQuery.setVal("conceptAggrConceptIdOnly", true);
                        return [4 /*yield*/, this.er.execQuery(candidateConceptsQuery)];
                    case 1:
                        response = _k.sent();
                        if (_.has(response, "conceptAggr")) {
                            getTopCorrelations.setVal("contextConceptIds", _.join(response["conceptAggr"], ","));
                        }
                        else {
                            console.warn("Warning: Failed to compute a candidate set of concepts");
                        }
                        _k.label = 2;
                    case 2:
                        if (conceptType) {
                            getTopCorrelations.setVal("conceptType", conceptType);
                        }
                        getTopCorrelations.setVal("exactCount", exactCount);
                        getTopCorrelations.setVal("approxCount", approxCount);
                        getTopCorrelations.setVal("sourceType", "news-concept");
                        return [4 /*yield*/, this.er.jsonRequest(this.path, getTopCorrelations.params)];
                    case 3:
                        res = _k.sent();
                        if (!!_.isUndefined(returnInfo)) return [3 /*break*/, 12];
                        corrs = __spread(_.get(res, "news-concept.exactCorrelations", []), _.get(res, "news-concept.approximateCorrelations", []));
                        conceptIds = _.map(corrs, "id");
                        conceptInfos_1 = {};
                        _k.label = 4;
                    case 4:
                        _k.trys.push([4, 9, 10, 11]);
                        _h = __values(_.range(0, _.size(conceptIds), 500)), _j = _h.next();
                        _k.label = 5;
                    case 5:
                        if (!!_j.done) return [3 /*break*/, 8];
                        i = _j.value;
                        ids = _.slice(conceptIds, i, i + 500);
                        q = new info_1.GetConceptInfo({ returnInfo: returnInfo });
                        // @ts-ignore
                        q.queryById(ids);
                        return [4 /*yield*/, this.er.execQuery(q)];
                    case 6:
                        info = _k.sent();
                        conceptInfos_1 = _.extend({}, conceptInfos_1, info);
                        _k.label = 7;
                    case 7:
                        _j = _h.next();
                        return [3 /*break*/, 5];
                    case 8: return [3 /*break*/, 11];
                    case 9:
                        e_4_1 = _k.sent();
                        e_4 = { error: e_4_1 };
                        return [3 /*break*/, 11];
                    case 10:
                        try {
                            if (_j && !_j.done && (_a = _h.return)) _a.call(_h);
                        }
                        finally { if (e_4) throw e_4.error; }
                        return [7 /*endfinally*/];
                    case 11:
                        if (_.has(res, "news-concept.exactCorrelations")) {
                            _.update(res, "news-concept.exactCorrelations", function (items) {
                                return _.map(items, function (item) {
                                    item["conceptInfo"] = _.get(conceptInfos_1, item["id"], {});
                                    return item;
                                });
                            });
                        }
                        if (_.has(res, "news-concept.approximateCorrelations")) {
                            _.update(res, "news-concept.approximateCorrelations", function (items) {
                                return _.map(items, function (item) {
                                    item["conceptInfo"] = _.get(conceptInfos_1, item["id"], {});
                                    return item;
                                });
                            });
                        }
                        _k.label = 12;
                    case 12: return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * Compute categories that correlate the most with the input data.
     * @param args Object which contains a host of optional parameters
     */
    GetTopCorrelations.prototype.getTopCategoryCorrelations = function (args) {
        if (args === void 0) { args = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var e_5, _a, _b, exactCount, _c, approxCount, _d, returnInfo, getTopCorrelations, res, corrs, categoryIds, categoryInfos_1, _e, _f, i, ids, q, info;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        _b = args.exactCount, exactCount = _b === void 0 ? 10 : _b, _c = args.approxCount, approxCount = _c === void 0 ? 0 : _c, _d = args.returnInfo, returnInfo = _d === void 0 ? new returnInfo_1.ReturnInfo() : _d;
                        getTopCorrelations = _.cloneDeep(this);
                        getTopCorrelations.clearVal("contextConceptIds");
                        getTopCorrelations.setVal("exactCount", exactCount);
                        getTopCorrelations.setVal("approxCount", approxCount);
                        getTopCorrelations.setVal("sourceType", "news-category");
                        return [4 /*yield*/, this.er.jsonRequest(this.path, getTopCorrelations.params)];
                    case 1:
                        res = _g.sent();
                        if (!_.isUndefined(returnInfo)) {
                            corrs = __spread(_.get(res, "news-category.exactCorrelations", []), _.get(res, "news-category.approximateCorrelations", []));
                            categoryIds = _.map(corrs, "id");
                            categoryInfos_1 = {};
                            try {
                                for (_e = __values(_.range(0, _.size(categoryIds), 500)), _f = _e.next(); !_f.done; _f = _e.next()) {
                                    i = _f.value;
                                    ids = _.slice(categoryIds, i, i + 500);
                                    q = new info_1.GetCategoryInfo({ returnInfo: returnInfo });
                                    // @ts-ignore
                                    q.queryById(ids);
                                    info = this.er.execQuery(q);
                                    categoryInfos_1 = _.extend({}, categoryInfos_1, info);
                                }
                            }
                            catch (e_5_1) { e_5 = { error: e_5_1 }; }
                            finally {
                                try {
                                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                                }
                                finally { if (e_5) throw e_5.error; }
                            }
                            if (_.has(res, "news-category.exactCorrelations")) {
                                _.update(res, "news-category.exactCorrelations", function (items) {
                                    return _.map(items, function (item) {
                                        item["categoryInfo"] = _.get(categoryInfos_1, item["id"], {});
                                        return item;
                                    });
                                });
                            }
                            if (_.has(res, "news-category.approximateCorrelations")) {
                                _.update(res, "news-category.approximateCorrelations", function (items) {
                                    return _.map(items, function (item) {
                                        item["categoryInfo"] = _.get(categoryInfos_1, item["id"], {});
                                        return item;
                                    });
                                });
                            }
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    return GetTopCorrelations;
}(base_1.QueryParamsBase));
exports.GetTopCorrelations = GetTopCorrelations;
//# sourceMappingURL=correlations.js.map