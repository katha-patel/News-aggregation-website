"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = require("axios");
var fs = require("fs");
var _ = require("lodash");
var moment = require("moment");
var semaphore_async_await_1 = require("semaphore-async-await");
var winston = require("winston");
var returnInfo_1 = require("./returnInfo");
var base_1 = require("./base");
/**
 * @class EventRegistry
 * Main class responsible for obtaining results form the Event Registry
 */
var EventRegistry = /** @class */ (function () {
    function EventRegistry(config) {
        if (config === void 0) { config = {}; }
        var _this = this;
        this.config = {
            host: "http://eventregistry.org",
            hostAnalytics: "http://analytics.eventregistry.org",
            logging: false,
            minDelayBetweenRequests: 1,
            repeatFailedRequestCount: 2,
            verboseOutput: false,
            allowUseOfArchive: true,
        };
        this.headers = {};
        this.dailyAvailableRequests = -1;
        this.remainingAvailableRequests = -1;
        this.lastQueryTime = 0;
        this._logRequests = false;
        this.stopStatusCodes = [
            204,
            400,
            401,
            403,
            530,
        ];
        this.lock = new semaphore_async_await_1.default(1);
        if (!!config.apiKey && !!config.printHostInfo) {
            console.log("using user provided API key for making requests");
        }
        if (fs && fs.existsSync(this.config.settingsFName || "settings.json")) {
            var localConfig = JSON.parse(fs.readFileSync(this.config.settingsFName || "settings.json", "utf8"));
            _.extend(this.config, localConfig);
            if (!_.isNil(config.apiKey)) {
                if (!!config.printHostInfo) {
                    console.log("found apiKey in settings file which will be used for making requests");
                }
                this.config.apiKey = config.apiKey;
            }
        }
        else {
            _.extend(this.config, config);
        }
        if (this.config.logging) {
            this.logger = winston.createLogger({
                level: "info",
                format: winston.format.json(),
                transports: [
                    new winston.transports.File({
                        filename: "logs/error.log",
                        level: "error",
                    }),
                    new winston.transports.File({ filename: "logs/info.log" }),
                ],
            });
        }
        this._logRequests = this.config.logging;
        this.initRequestLogger();
        if (_.isNil(this.config.apiKey)) {
            console.info("No API key was provided. You will be allowed to perform only a very limited number of requests per day.");
        }
        if (!!config.printHostInfo) {
            console.log("Event Registry host: " + config.host);
            console.log("Text analytics host: " + config.hostAnalytics);
        }
        this.config.minDelayBetweenRequests *= 1000;
        axios_1.default.interceptors.response.use(undefined, function (err) {
            // If config does not exist or the retry option is not set, reject
            if (!err.config || !err.config.retry) {
                return Promise.reject(err);
            }
            if (_.includes(_this.stopStatusCodes, err.response.status)) {
                return Promise.reject(err);
            }
            // Set the variable for keeping track of the retry count
            err.config.__retryCount = err.config.__retryCount || 0;
            // Check if we've maxed out the total number of retries
            if (err.config.__retryCount >= err.config.retry) {
                // Reject with the error
                return Promise.reject(err);
            }
            err.config.__retryCount += 1;
            return new Promise(function (resolve) {
                setTimeout(function () { return resolve(); }, err.config.retryDelay || 1);
            }).then(function () { return axios_1.default(err.config); });
        });
    }
    /**
     * Should all requests be logged to a file or not?
     */
    EventRegistry.prototype.setLogging = function (logging) {
        this._logRequests = logging;
        this.initRequestLogger();
    };
    Object.defineProperty(EventRegistry.prototype, "verboseOutput", {
        get: function () {
            return this.config.verboseOutput;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Main method for executing the search queries.
     * @param query instance of Query class
     */
    EventRegistry.prototype.execQuery = function (query, allowUseOfArchive) {
        return __awaiter(this, void 0, void 0, function () {
            var params, request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        params = query.getQueryParams();
                        return [4 /*yield*/, this.jsonRequest(query.path, params, allowUseOfArchive)];
                    case 1:
                        request = _a.sent();
                        if (!_.has(request, "data") && this.config.verboseOutput) {
                            this.logger.error("Request did not return with the 'data' property.");
                        }
                        return [2 /*return*/, _.get(request, "data", {})];
                }
            });
        });
    };
    EventRegistry.prototype.jsonRequestAnalytics = function (path, parameters, headers, cookies) {
        return __awaiter(this, void 0, void 0, function () {
            var request, args, cookieString, errorMessage, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.lock.acquire()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, 5, 6]);
                        _.set(parameters, "apiKey", this.config.apiKey);
                        args = {
                            url: path,
                            method: "POST",
                            baseURL: this.config.hostAnalytics,
                            data: parameters,
                            timeout: 600000,
                            responseType: "json",
                            maxRedirects: 5,
                        };
                        if (!!headers) {
                            _.set(args, "headers", headers);
                        }
                        if (!!cookies) {
                            cookieString = Object.keys(cookies).map(function (key) { return key + "=" + cookies[key]; }).join(";") + ";";
                            _.set(args, "headers.Cookie", cookieString);
                        }
                        return [4 /*yield*/, axios_1.default.request(args)];
                    case 3:
                        request = _a.sent();
                        this.headers = _.get(request, "headers", {});
                        if (_.get(request, "status") !== 200) {
                            throw new Error(_.get(request, "statusText"));
                        }
                        errorMessage = _.get(request, "data.error", "");
                        if (errorMessage) {
                            throw new Error(errorMessage);
                        }
                        return [3 /*break*/, 6];
                    case 4:
                        error_1 = _a.sent();
                        console.error("Event Registry Analytics exception while executing the request.");
                        request = { data: { error: error_1 } };
                        if (this.config.verboseOutput) {
                            if (error_1 && error_1.stack && error_1.message) {
                                console.error(error_1.message);
                            }
                            else {
                                console.error(_.get(error_1, "response.status") + ": " + _.get(error_1, "response.statusText") + " => " + _.get(error_1, "response.data"));
                            }
                        }
                        // try to print out the error that should be passed by in case the server is down or responds with errors
                        if (this.config.logging) {
                            this.logger.error(_.get(error_1, "errno", error_1));
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        this.lock.release();
                        return [7 /*endfinally*/];
                    case 6: return [2 /*return*/, request];
                }
            });
        });
    };
    /**
     * Make a request for json data
     * @param path url on er (e.g. "/api/v1/article")
     * @param parameters Optional parameters to be included in the request
     */
    EventRegistry.prototype.jsonRequest = function (path, parameters, allowUseOfArchive) {
        if (allowUseOfArchive === void 0) { allowUseOfArchive = this.config.allowUseOfArchive; }
        return __awaiter(this, void 0, void 0, function () {
            var request, current, errorMessage, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        current = moment.utc().milliseconds();
                        if (!(this.lastQueryTime && current - this.lastQueryTime < this.config.minDelayBetweenRequests)) return [3 /*break*/, 2];
                        return [4 /*yield*/, base_1.sleep(this.config.minDelayBetweenRequests - (current - this.lastQueryTime))];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.lock.acquire()];
                    case 3:
                        _a.sent();
                        if (this._logRequests) {
                            if (!_.isEmpty(parameters)) {
                                this.requestLogger.info("# " + JSON.stringify(parameters) + "\n");
                            }
                            this.requestLogger.info(path + "\n\n");
                        }
                        this.lastQueryTime = current;
                        _a.label = 4;
                    case 4:
                        _a.trys.push([4, 6, 7, 8]);
                        _.set(parameters, "apiKey", this.config.apiKey);
                        if (!allowUseOfArchive) {
                            _.set(parameters, "forceMaxDataTimeWindow", 31);
                        }
                        return [4 /*yield*/, axios_1.default.request({
                                url: path,
                                method: "POST",
                                baseURL: this.config.host,
                                data: parameters,
                                timeout: 600000,
                                responseType: "json",
                                maxRedirects: 5,
                                retry: this.config.repeatFailedRequestCount,
                            })];
                    case 5:
                        request = _a.sent();
                        this.headers = _.get(request, "headers", {});
                        if (_.get(request, "status") !== 200) {
                            throw new Error(_.get(request, "statusText"));
                        }
                        if (this.getLastHeader("warning")) {
                            console.warn("WARNING: " + this.getLastHeader("warning"));
                        }
                        this.dailyAvailableRequests = _.toNumber(this.getLastHeader("x-ratelimit-limit", "-1"));
                        this.remainingAvailableRequests = _.toNumber(this.getLastHeader("x-ratelimit-remaining", "-1"));
                        errorMessage = _.get(request, "data.error", "");
                        if (errorMessage) {
                            throw new Error(errorMessage);
                        }
                        return [3 /*break*/, 8];
                    case 6:
                        error_2 = _a.sent();
                        console.error("Event Registry exception while executing the request.");
                        request = { data: { error: error_2 } };
                        // try to print out the error that should be passed by in case the server is down or responds with errors
                        if (this.config.verboseOutput) {
                            if (error_2 && error_2.stack && error_2.message) {
                                console.error(error_2.message);
                            }
                            else {
                                console.error(_.get(error_2, "response.status") + ": " + _.get(error_2, "response.statusText") + " => " + _.get(error_2, "response.data"));
                            }
                        }
                        if (this.config.logging) {
                            this.logger.error(_.get(error_2, "errno", error_2));
                        }
                        return [3 /*break*/, 8];
                    case 7:
                        this.lock.release();
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/, request];
                }
            });
        });
    };
    /**
     * get the number of requests that are still available for the user today. Information is only accessible after you make some query.
     */
    EventRegistry.prototype.getRemainingAvailableRequests = function () {
        return this.remainingAvailableRequests;
    };
    /**
     * get the total number of requests that the user can make in a day. Information is only accessible after you make some query.
     */
    EventRegistry.prototype.getDailyAvailableRequests = function () {
        return this.dailyAvailableRequests;
    };
    /**
     * Return the headers returned in the response object of the last executed request
     */
    EventRegistry.prototype.getLastHeaders = function () {
        return this.headers;
    };
    /**
     * Get a value of the header headerName that was set in the headers in the last response object
     */
    EventRegistry.prototype.getLastHeader = function (headerName, dfltVal) {
        return _.get(this.headers, headerName, dfltVal);
    };
    /**
     * print some statistics about the last executed request
     */
    EventRegistry.prototype.printLastReqStats = function () {
        console.log("Tokens used by the request: " + this.getLastHeader("req-tokens"));
        console.log("Performed action: " + this.getLastHeader("req-action"));
        console.log("Was archive used for the query: " + (this.getLastReqArchiveUse() ? "Yes" : "No"));
    };
    /**
     * return true or false depending on whether the last request used the archive or not
     */
    EventRegistry.prototype.getLastReqArchiveUse = function () {
        return this.getLastHeader("req-archive", "0") === "1";
    };
    /**
     * Return the number of used and total available tokens. Can be used at any time (also before making queries)
     */
    EventRegistry.prototype.getUsageInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.jsonRequest("/api/v1/usage")];
                    case 1:
                        request = _a.sent();
                        return [2 /*return*/, request.data];
                }
            });
        });
    };
    EventRegistry.prototype.getServiceStatus = function () {
        return __awaiter(this, void 0, void 0, function () {
            var request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.jsonRequest("/api/v1/getServiceStatus")];
                    case 1:
                        request = _a.sent();
                        return [2 /*return*/, request.data];
                }
            });
        });
    };
    EventRegistry.prototype.getUrl = function (query) {
        if (!(query instanceof base_1.QueryParamsBase)) {
            if (this.config.verboseOutput) {
                console.warn("query parameter should be an instance of a class that has Query as a base class, such as QueryArticles or QueryEvents");
            }
        }
        var allParams = query.getQueryParams();
        return this.config.host + query.path + "?" + _.join(_.map(_.keys(allParams), function (key) { return key + "=" + allParams[key]; }), "&");
    };
    /**
     * Return a list of concepts that contain the given prefix.
     * Returned matching concepts are sorted based on their frequency of occurrence in news (from most to least frequent)
     * @param prefix input text that should be contained in the concept
     * @param args Object which contains a host of optional parameters
     */
    EventRegistry.prototype.suggestConcepts = function (prefix, args) {
        if (args === void 0) { args = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, sources, _b, lang, _c, conceptLang, _d, page, _e, count, _f, returnInfo, otherParams, params, request;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        _a = args.sources, sources = _a === void 0 ? ["concepts"] : _a, _b = args.lang, lang = _b === void 0 ? "eng" : _b, _c = args.conceptLang, conceptLang = _c === void 0 ? "eng" : _c, _d = args.page, page = _d === void 0 ? 1 : _d, _e = args.count, count = _e === void 0 ? 20 : _e, _f = args.returnInfo, returnInfo = _f === void 0 ? new returnInfo_1.ReturnInfo() : _f, otherParams = __rest(args, ["sources", "lang", "conceptLang", "page", "count", "returnInfo"]);
                        if (page <= 0) {
                            throw new RangeError("page parameter should be above 0");
                        }
                        params = {
                            prefix: prefix,
                            source: sources,
                            lang: lang,
                            conceptLang: conceptLang,
                            page: page,
                            count: count,
                        };
                        params = _.extend({}, params, otherParams, returnInfo.getParams());
                        return [4 /*yield*/, this.jsonRequest("/api/v1/suggestConceptsFast", params)];
                    case 1:
                        request = _g.sent();
                        return [2 /*return*/, request.data];
                }
            });
        });
    };
    /**
     * Return a list of dmoz categories that contain the prefix
     * @param prefix input text that should be contained in the category name
     * @param args Object which contains a host of optional parameters
     */
    EventRegistry.prototype.suggestCategories = function (prefix, args) {
        if (args === void 0) { args = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, page, _b, count, _c, returnInfo, otherParams, params, request;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = args.page, page = _a === void 0 ? 1 : _a, _b = args.count, count = _b === void 0 ? 20 : _b, _c = args.returnInfo, returnInfo = _c === void 0 ? new returnInfo_1.ReturnInfo() : _c, otherParams = __rest(args, ["page", "count", "returnInfo"]);
                        if (page <= 0) {
                            throw new RangeError("page parameter should be above 0");
                        }
                        params = { prefix: prefix, page: page, count: count };
                        params = _.extend({}, params, otherParams, returnInfo.getParams());
                        return [4 /*yield*/, this.jsonRequest("/api/v1/suggestCategoriesFast", params)];
                    case 1:
                        request = _d.sent();
                        return [2 /*return*/, request.data];
                }
            });
        });
    };
    /**
     * Return a list of news sources that match the prefix
     * @param prefix input text that should be contained in the source name or uri
     * @param args Object which contains a host of optional parameters
     */
    EventRegistry.prototype.suggestNewsSources = function (prefix, args) {
        if (args === void 0) { args = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, page, _b, count, _c, dataType, otherParams, request;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = args.page, page = _a === void 0 ? 1 : _a, _b = args.count, count = _b === void 0 ? 20 : _b, _c = args.dataType, dataType = _c === void 0 ? ["news", "pr", "blog"] : _c, otherParams = __rest(args, ["page", "count", "dataType"]);
                        if (page <= 0) {
                            throw new RangeError("page parameter should be above 0");
                        }
                        return [4 /*yield*/, this.jsonRequest("/api/v1/suggestSourcesFast", __assign({ prefix: prefix, page: page, dataType: dataType, count: count }, otherParams))];
                    case 1:
                        request = _d.sent();
                        return [2 /*return*/, request.data];
                }
            });
        });
    };
    /**
     * Return a list of news source groups that match the prefix
     * @param prefix input text that should be contained in the source group name or uri
     * @param args Object which contains a host of optional parameters
     */
    EventRegistry.prototype.suggestSourceGroups = function (prefix, args) {
        if (args === void 0) { args = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, page, _b, count, otherParams, request;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = args.page, page = _a === void 0 ? 1 : _a, _b = args.count, count = _b === void 0 ? 20 : _b, otherParams = __rest(args, ["page", "count"]);
                        if (page <= 0) {
                            throw new RangeError("page parameter should be above 0");
                        }
                        return [4 /*yield*/, this.jsonRequest("/api/v1/suggestSourceGroups", __assign({ prefix: prefix, page: page, count: count }, otherParams))];
                    case 1:
                        request = _c.sent();
                        return [2 /*return*/, request.data];
                }
            });
        });
    };
    /**
     * Return a list of geo locations (cities or countries) that contain the prefix
     * @param prefix input text that should be contained in the location name
     * @param args Object which contains a host of optional parameters
     */
    EventRegistry.prototype.suggestLocations = function (prefix, args) {
        if (args === void 0) { args = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, sources, _b, lang, _c, count, _d, countryUri, sortByDistanceTo, _e, returnInfo, otherParams, params, request;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _a = args.sources, sources = _a === void 0 ? ["place", "country"] : _a, _b = args.lang, lang = _b === void 0 ? "eng" : _b, _c = args.count, count = _c === void 0 ? 20 : _c, _d = args.countryUri, countryUri = _d === void 0 ? "" : _d, sortByDistanceTo = args.sortByDistanceTo, _e = args.returnInfo, returnInfo = _e === void 0 ? new returnInfo_1.ReturnInfo() : _e, otherParams = __rest(args, ["sources", "lang", "count", "countryUri", "sortByDistanceTo", "returnInfo"]);
                        params = {
                            prefix: prefix,
                            count: count,
                            source: sources,
                            lang: lang,
                            countryUri: countryUri,
                        };
                        params = _.extend({}, params, otherParams, returnInfo.getParams());
                        if (sortByDistanceTo) {
                            if (!_.isArray(sortByDistanceTo)) {
                                throw new Error("sortByDistanceTo has to contain a tuple with latitude and longitude of the location");
                            }
                            if (_.size(sortByDistanceTo) !== 2) {
                                throw new Error("The sortByDistanceTo should contain two numbers");
                            }
                            params["closeToLat"] = sortByDistanceTo[0];
                            params["closeToLon"] = sortByDistanceTo[1];
                        }
                        return [4 /*yield*/, this.jsonRequest("/api/v1/suggestLocationsFast", params)];
                    case 1:
                        request = _f.sent();
                        return [2 /*return*/, request.data];
                }
            });
        });
    };
    /**
     * Return a list of geo locations (cities or places) that are close to the provided (lat, long) values
     * @param latitude latitude part of the coordinate
     * @param longitude longitude part of the coordinate
     * @param radiusKm radius in kilometers around the coordinates inside which the locations should be returned
     * @param args Object which contains a host of optional parameters
     */
    EventRegistry.prototype.suggestLocationsAtCoordinate = function (latitude, longitude, radiusKm, args) {
        if (args === void 0) { args = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, limitToCities, _b, lang, _c, count, _d, ignoreNonWiki, _e, returnInfo, otherParams, params, request;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _a = args.limitToCities, limitToCities = _a === void 0 ? false : _a, _b = args.lang, lang = _b === void 0 ? "eng" : _b, _c = args.count, count = _c === void 0 ? 20 : _c, _d = args.ignoreNonWiki, ignoreNonWiki = _d === void 0 ? true : _d, _e = args.returnInfo, returnInfo = _e === void 0 ? new returnInfo_1.ReturnInfo() : _e, otherParams = __rest(args, ["limitToCities", "lang", "count", "ignoreNonWiki", "returnInfo"]);
                        if (!_.isNumber(latitude)) {
                            throw new Error("The 'latitude' should be a number");
                        }
                        if (!_.isNumber(longitude)) {
                            throw new Error("The 'longitude' should be a number");
                        }
                        params = {
                            action: "getLocationsAtCoordinate",
                            lat: latitude,
                            lon: longitude,
                            radius: radiusKm,
                            limitToCities: limitToCities,
                            count: count,
                            lang: lang,
                        };
                        params = _.extend({}, params, otherParams, returnInfo.getParams());
                        return [4 /*yield*/, this.jsonRequest("/api/v1/suggestLocationsFast", params)];
                    case 1:
                        request = _f.sent();
                        return [2 /*return*/, request.data];
                }
            });
        });
    };
    /**
     * Return a list of news sources that are close to the provided (lat, long) values
     * @param latitude latitude part of the coordinate
     * @param longitude longitude part of the coordinate
     * @param radiusKm radius in kilometers around the coordinates inside which the news sources should be located
     * @param count number of returned suggestions
     */
    EventRegistry.prototype.suggestSourcesAtCoordinate = function (latitude, longitude, radiusKm, count) {
        if (count === void 0) { count = 20; }
        var otherParams = [];
        for (var _i = 4; _i < arguments.length; _i++) {
            otherParams[_i - 4] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var params, request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!_.isNumber(latitude)) {
                            throw new Error("The 'latitude' should be a number");
                        }
                        if (!_.isNumber(longitude)) {
                            throw new Error("The 'longitude' should be a number");
                        }
                        params = __assign({ action: "getSourcesAtCoordinate", lat: latitude, lon: longitude, radius: radiusKm, count: count }, otherParams);
                        return [4 /*yield*/, this.jsonRequest("/api/v1/suggestSourcesFast", params)];
                    case 1:
                        request = _a.sent();
                        return [2 /*return*/, request.data];
                }
            });
        });
    };
    /**
     * Return a list of news sources that are close to the provided (lat, long) values
     * @param conceptUri concept that represents a geographic location for which we would like to obtain a list of sources located at the place
     * @param args Object which contains a host of optional parameters
     */
    EventRegistry.prototype.suggestSourcesAtPlace = function (conceptUri, args) {
        if (args === void 0) { args = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, page, _b, count, _c, dataType, otherParams, params, request;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _a = args.page, page = _a === void 0 ? 1 : _a, _b = args.count, count = _b === void 0 ? 20 : _b, _c = args.dataType, dataType = _c === void 0 ? "news" : _c, otherParams = __rest(args, ["page", "count", "dataType"]);
                        params = __assign({ action: "getSourcesAtPlace", conceptUri: conceptUri, page: page, count: count, dataType: dataType }, otherParams);
                        return [4 /*yield*/, this.jsonRequest("/api/v1/suggestSourcesFast", params)];
                    case 1:
                        request = _d.sent();
                        return [2 /*return*/, request.data];
                }
            });
        });
    };
    /**
     * Return a list of news sources that match the prefix
     * @param prefix: input text that should be contained in the author name and source url
     * @param page: page of results
     * @param count: number of returned suggestions
     */
    EventRegistry.prototype.suggestAuthors = function (prefix, page, count) {
        if (page === void 0) { page = 1; }
        if (count === void 0) { count = 20; }
        var otherParams = [];
        for (var _i = 3; _i < arguments.length; _i++) {
            otherParams[_i - 3] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var params, request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (page <= 0) {
                            throw new Error("Page parameter should be above 0.");
                        }
                        params = __assign({ prefix: prefix,
                            page: page,
                            count: count }, otherParams);
                        return [4 /*yield*/, this.jsonRequest("/api/v1/suggestAuthorsFast", params)];
                    case 1:
                        request = _a.sent();
                        return [2 /*return*/, request.data];
                }
            });
        });
    };
    /**
     * Return a list of concept classes that match the given prefix
     * @param prefix input text that should be contained in the category name
     * @param args Object which contains a host of optional parameters
     */
    EventRegistry.prototype.suggestConceptClasses = function (prefix, args) {
        if (args === void 0) { args = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, lang, _b, conceptLang, _c, source, _d, page, _e, count, _f, returnInfo, otherParams, params, request;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        _a = args.lang, lang = _a === void 0 ? "eng" : _a, _b = args.conceptLang, conceptLang = _b === void 0 ? "eng" : _b, _c = args.source, source = _c === void 0 ? ["dbpedia", "custom"] : _c, _d = args.page, page = _d === void 0 ? 1 : _d, _e = args.count, count = _e === void 0 ? 20 : _e, _f = args.returnInfo, returnInfo = _f === void 0 ? new returnInfo_1.ReturnInfo() : _f, otherParams = __rest(args, ["lang", "conceptLang", "source", "page", "count", "returnInfo"]);
                        if (page < 1) {
                            throw new Error("page parameter should be above 0");
                        }
                        params = { prefix: prefix, lang: lang, conceptLang: conceptLang, source: source, page: page, count: count };
                        params = _.extend({}, params, otherParams, returnInfo.getParams());
                        return [4 /*yield*/, this.jsonRequest("/api/v1/suggestConceptClasses", params)];
                    case 1:
                        request = _g.sent();
                        return [2 /*return*/, request.data];
                }
            });
        });
    };
    /**
     * return a concept uri that is the best match for the given concept label
     * if there are multiple matches for the given conceptLabel,
     * they are sorted based on their frequency of occurrence in news (most to least frequent)
     * @param conceptLabel partial or full name of the concept for which to return the concept uri
     * @param args Object which contains a host of optional parameters
     */
    EventRegistry.prototype.getConceptUri = function (conceptLabel, args) {
        if (args === void 0) { args = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, lang, _b, sources, matches;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = args.lang, lang = _a === void 0 ? "eng" : _a, _b = args.sources, sources = _b === void 0 ? ["concepts"] : _b;
                        return [4 /*yield*/, this.suggestConcepts(conceptLabel, { lang: lang, sources: sources })];
                    case 1:
                        matches = _c.sent();
                        return [2 /*return*/, _.get(_.first(matches), "uri", undefined)];
                }
            });
        });
    };
    /**
     * Return a location uri that is the best match for the given location label
     * @param locationLabel partial or full location name for which to return the location uri
     * @param args Object which contains a host of optional parameters
     */
    EventRegistry.prototype.getLocationUri = function (locationLabel, args) {
        if (args === void 0) { args = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, lang, _b, sources, countryUri, sortByDistanceTo, matches;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = args.lang, lang = _a === void 0 ? "eng" : _a, _b = args.sources, sources = _b === void 0 ? ["place", "country"] : _b, countryUri = args.countryUri, sortByDistanceTo = args.sortByDistanceTo;
                        return [4 /*yield*/, this.suggestLocations(locationLabel, { lang: lang, sources: sources, countryUri: countryUri, sortByDistanceTo: sortByDistanceTo })];
                    case 1:
                        matches = _c.sent();
                        return [2 /*return*/, _.get(_.first(matches), "wikiUri", undefined)];
                }
            });
        });
    };
    /**
     * Return a category uri that is the best match for the given label
     * @param categoryLabel partial or full name of the category for which to return category uri
     */
    EventRegistry.prototype.getCategoryUri = function (categoryLabel) {
        return __awaiter(this, void 0, void 0, function () {
            var matches;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.suggestCategories(categoryLabel)];
                    case 1:
                        matches = _a.sent();
                        return [2 /*return*/, _.get(_.first(matches), "uri", undefined)];
                }
            });
        });
    };
    /**
     * Return the news source that best matches the source name
     * @param sourceName partial or full name of the source or source uri for which to return source uri
     * @param dataType: return the source uri that provides content of these data types
     */
    EventRegistry.prototype.getNewsSourceUri = function (sourceName, dataType) {
        if (dataType === void 0) { dataType = ["news", "pr", "blog"]; }
        return __awaiter(this, void 0, void 0, function () {
            var matches;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.suggestNewsSources(sourceName, { dataType: dataType })];
                    case 1:
                        matches = _a.sent();
                        return [2 /*return*/, _.get(_.first(matches), "uri", undefined)];
                }
            });
        });
    };
    /**
     * alternative (shorter) name for the method getNewsSourceUri()
     */
    EventRegistry.prototype.getSourceUri = function (sourceName, dataType) {
        if (dataType === void 0) { dataType = ["news", "pr", "blog"]; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getNewsSourceUri(sourceName, dataType)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Return the URI of the source group that best matches the name
     * @param sourceGroupName partial or full name of the source group
     */
    EventRegistry.prototype.getSourceGroupUri = function (sourceGroupName) {
        return __awaiter(this, void 0, void 0, function () {
            var matches;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.suggestSourceGroups(sourceGroupName)];
                    case 1:
                        matches = _a.sent();
                        return [2 /*return*/, _.get(_.first(matches), "uri", undefined)];
                }
            });
        });
    };
    /**
     * Return a uri of the concept class that is the best match for the given label
     * @param classLabel partial or full name of the concept class for which to return class uri
     * @param lang language in which the class label is specified
     */
    EventRegistry.prototype.getConceptClassUri = function (classLabel, lang) {
        if (lang === void 0) { lang = "eng"; }
        return __awaiter(this, void 0, void 0, function () {
            var matches;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.suggestConceptClasses(classLabel, { lang: lang })];
                    case 1:
                        matches = _a.sent();
                        return [2 /*return*/, _.get(_.first(matches), "uri", undefined)];
                }
            });
        });
    };
    /**
     * Return detailed information about a particular concept
     * @param conceptUri uri of the concept
     * @param returnInfo what details about the concept should be included in the returned information
     */
    EventRegistry.prototype.getConceptInfo = function (conceptUri, returnInfo) {
        return __awaiter(this, void 0, void 0, function () {
            var conceptInfo, params, request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!returnInfo) {
                            conceptInfo = new returnInfo_1.ConceptInfoFlags({ synonyms: true, image: true, description: true });
                            returnInfo = new returnInfo_1.ReturnInfo({ conceptInfo: conceptInfo });
                        }
                        params = {
                            uri: conceptUri,
                            action: "getInfo",
                        };
                        params = _.extend({}, params, returnInfo.getParams());
                        return [4 /*yield*/, this.jsonRequest("/api/v1/concept/getInfo", params)];
                    case 1:
                        request = _a.sent();
                        return [2 /*return*/, request.data];
                }
            });
        });
    };
    /**
     * return author uri that is the best match for the given author name (and potentially source url)
     * if there are multiple matches for the given author name, they are sorted based on the number of articles they have written (from most to least frequent)
     * @param authorName: partial or full name of the author, potentially also containing the source url (e.g. "george brown nytimes")
     */
    EventRegistry.prototype.getAuthorUri = function (authorName) {
        return __awaiter(this, void 0, void 0, function () {
            var matches;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.suggestAuthors(authorName)];
                    case 1:
                        matches = _a.sent();
                        return [2 /*return*/, _.get(_.first(matches), "uri", undefined)];
                }
            });
        });
    };
    EventRegistry.getUriFromUriWgt = function (uriWgtList) {
        if (!_.isArray(uriWgtList)) {
            throw new Error("uriWgtList has to be a list of strings that represent article uris");
        }
        return _.map(uriWgtList, function (uriWgt) { return _.first(_.split(uriWgt, ":")); });
    };
    // Additional utility functions
    /**
     * If you have article urls and you want to query them in ER you first have to obtain their uris in the ER.
     * @param articleUrls a single article url or a list of article urls
     */
    EventRegistry.prototype.getArticleUris = function (articleUrls) {
        return __awaiter(this, void 0, void 0, function () {
            var request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!_.isArray(articleUrls) && !_.isString(articleUrls)) {
                            throw new Error("Expected a single article url or a list of urls");
                        }
                        return [4 /*yield*/, this.jsonRequest("/api/v1/articleMapper", { articleUrl: articleUrls })];
                    case 1:
                        request = _a.sent();
                        return [2 /*return*/, request.data];
                }
            });
        });
    };
    /**
     * Return information about the latest imported article
     */
    EventRegistry.prototype.getSourceGroups = function () {
        return __awaiter(this, void 0, void 0, function () {
            var request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.jsonRequest("/api/v1/sourceGroup/getSourceGroups", { action: "getSourceGroups" })];
                    case 1:
                        request = _a.sent();
                        return [2 /*return*/, request.data];
                }
            });
        });
    };
    /**
     * Return info about the source group
     */
    EventRegistry.prototype.getSourceGroup = function (sourceGroupUri) {
        return __awaiter(this, void 0, void 0, function () {
            var request;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.jsonRequest("/api/v1/sourceGroup/getSourceGroupInfo", { action: "getSourceGroupInfo", uri: sourceGroupUri })];
                    case 1:
                        request = _a.sent();
                        return [2 /*return*/, request.data];
                }
            });
        });
    };
    EventRegistry.prototype.initRequestLogger = function () {
        if (this._logRequests && _.isUndefined(this.requestLogger)) {
            this.requestLogger = winston.createLogger({
                level: "info",
                format: winston.format.json(),
                transports: [
                    new winston.transports.File({ filename: "logs/requests.log" }),
                ],
            });
        }
    };
    return EventRegistry;
}());
exports.EventRegistry = EventRegistry;
/**
 * @class ArticleMapper
 * Create instance of article mapper it will map from article urls to article uris
 * the mappings can be remembered so it will not repeat requests for the same article urls
 */
var ArticleMapper = /** @class */ (function () {
    function ArticleMapper(er, rememberMapping) {
        if (rememberMapping === void 0) { rememberMapping = true; }
        this.articleUrlToUri = {};
        this.rememberMappings = true;
        this.er = er;
        this.rememberMappings = rememberMapping;
    }
    /**
     * Given the article url, return an array with 0, 1 or more article uris.
     * Not all returned article uris are necessarily valid anymore.
     * For news sources of lower importance we remove the duplicated articles and just keep the latest content
     * @param articleUrl string containing the article url
     */
    ArticleMapper.prototype.getArticleUri = function (articleUrl) {
        return __awaiter(this, void 0, void 0, function () {
            var response, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (_.has(this.articleUrlToUri, articleUrl)) {
                            return [2 /*return*/, _.get(this.articleUrlToUri, articleUrl)];
                        }
                        return [4 /*yield*/, this.er.getArticleUris(articleUrl)];
                    case 1:
                        response = _a.sent();
                        value = _.get(response, articleUrl, undefined);
                        if (this.rememberMappings && value) {
                            this.articleUrlToUri[articleUrl] = value;
                        }
                        return [2 /*return*/, value];
                }
            });
        });
    };
    return ArticleMapper;
}());
exports.ArticleMapper = ArticleMapper;
//# sourceMappingURL=eventRegistry.js.map